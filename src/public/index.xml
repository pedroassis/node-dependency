<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node-Dependency </title>
    <link>http://localhost:1313/</link>
    <language>en-us</language>
    <author>Pedro Assis</author>
    <rights>(C) 2015</rights>
    <updated>2015-07-04 21:55:18 -0300 BRT</updated>

    
      
        <item>
          <title>JS and Annotations</title>
          <link>http://localhost:1313/post/JS-Annotations/</link>
          <pubDate>Sat, 04 Jul 2015 21:55:18 BRT</pubDate>
          <author>Pedro Assis</author>
          <guid>http://localhost:1313/post/JS-Annotations/</guid>
          <description>

&lt;p&gt;Since ECMAScript 5 specification it was introduced the &amp;lsquo;use strict&amp;rsquo; directive, which is used to declared that the code inside the scope of the &amp;lsquo;use strict&amp;rsquo; should use a subset of the JavaScript language.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It means that the same code should run different of the same code without it, for instance, you can&amp;rsquo;t declare a global variable in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    someNumber = 123;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above will run in any browser, declaring &lt;code&gt;someNumber&lt;/code&gt; in the global scope because of the missing &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    &#39;use strict&#39;;
    someNumber = 123; // ReferenceError: someNumber is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second snippet runs in strict mode and will throw a error on browsers ES5 compatible, because of using a variable that was not defined.&lt;/p&gt;

&lt;p&gt;And the same code will run without any problems in all browsers that do not support the ES5 especification.&lt;/p&gt;

&lt;p&gt;Recently ASM started using a annotation &lt;code&gt;use asm&lt;/code&gt; to define that a code should be run as a fast subset of JS (Pretty fast accually).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;time-to-use-it-too:d7338891ff065b1ca5fd0fae23813d48&#34;&gt;Time to use it too!&lt;/h3&gt;

&lt;p&gt;So we already know that annotations exists in JS, they look like code, in fact they are a &lt;code&gt;Literal Expression&lt;/code&gt;, but they just get vaccued into the void, not meaning anything to normal JS code.&lt;/p&gt;

&lt;h4 id=&#34;how-can-we-use-it:d7338891ff065b1ca5fd0fae23813d48&#34;&gt;How can we use it?&lt;/h4&gt;

&lt;p&gt;Pretty good question, JS does not provide a simple way of using it.
I was going to suggest writing a parser to read the code and detect those annotations.&lt;br /&gt;
JS is such a powerful language that you can accually do it.&lt;/p&gt;

&lt;p&gt;But this would take a little bit of time, and reading annotations is not what we need right now, we need to use it.&lt;/p&gt;

&lt;p&gt;Then I&amp;rsquo;ve found there are a lot of JS parsers out there and I chose &lt;a href=&#34;http://esprima.org&#34;&gt;Esprima&lt;/a&gt; to the job.&lt;/p&gt;

&lt;p&gt;Esprima is pretty cool, it reads your JS code and returns a Node Tree with the parsed code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s read the following function and see what we get.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function Person(name){};
JSON.stringify(esprima.parse(&#39;function Person(name){}&#39;), null, 4) 
// Or JSON.stringify(esprima.parse(Person.toString()), null, 4) 
{
    &amp;quot;type&amp;quot;: &amp;quot;Program&amp;quot;,
    &amp;quot;body&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;FunctionDeclaration&amp;quot;,
            &amp;quot;id&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Person&amp;quot;
            },
            &amp;quot;params&amp;quot;: [
                {
                    &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,
                    &amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;
                }
            ],
            &amp;quot;defaults&amp;quot;: [],
            &amp;quot;body&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;BlockStatement&amp;quot;,
                &amp;quot;body&amp;quot;: []
            },
            &amp;quot;generator&amp;quot;: false,
            &amp;quot;expression&amp;quot;: false
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esprima read a bunch of data out of the function.&lt;/p&gt;

&lt;p&gt;It has identified that this is a &lt;code&gt;FunctionDeclaration&lt;/code&gt;, with name &lt;code&gt;Person&lt;/code&gt; and a parameter called &lt;code&gt;name&lt;/code&gt;.&lt;br /&gt;
And also the &lt;code&gt;body&lt;/code&gt; of the function, which is empty.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s cool! How about this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var code = &amp;quot;&#39;use strict&#39;&amp;quot; +
           &amp;quot;\n&amp;quot; +
           &amp;quot;function Person(name){}&amp;quot;;

JSON.stringify(esprima.parse(code), null, 4)
{
    &amp;quot;type&amp;quot;: &amp;quot;Program&amp;quot;,
    &amp;quot;body&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;ExpressionStatement&amp;quot;,
            &amp;quot;expression&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;Literal&amp;quot;,
                &amp;quot;value&amp;quot;: &amp;quot;use strict&amp;quot;,
                &amp;quot;raw&amp;quot;: &amp;quot;\&amp;quot;use strict\&amp;quot;&amp;quot;
            }
        },
        {
            &amp;quot;type&amp;quot;: &amp;quot;FunctionDeclaration&amp;quot;,
            &amp;quot;id&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Person&amp;quot;
            }
            ...
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can read the annotations from the source code, we can see in the JSON that we have a &lt;code&gt;use strict&lt;/code&gt; before our function.&lt;/p&gt;

&lt;p&gt;This is how we extract annotations from JS files on &lt;a href=&#34;https://github.com/pedroassis/js-annotation-reader&#34;&gt;js-annotation-reader&lt;/a&gt;, which is the module used by &lt;a href=&#34;https://github.com/pedroassis/node-dependency&#34;&gt;node-dependency&lt;/a&gt; to enable annotation support.&lt;/p&gt;

&lt;p&gt;Using this technique I wrote js-annotation-reader, and using it you can read a file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;package com.pedro&#39;

&#39;@RequestHandler(&amp;quot;/user&amp;quot;)&#39;
function UserHandler () {
    
    &#39;@Get(&amp;quot;/all&amp;quot;)&#39;
    this.fetchAll = function() {
        return [{
            name : &#39;USER!&#39;
        }, {
            anotherOne : 1234567
        }];
    };
    
    &#39;@Get(&amp;quot;/id/:id&amp;quot;)&#39;
    this.getByID = function($id) {
        return {
            userID : $id,
            name : &amp;quot;aSDFGHJKL&amp;quot;
        };
    };

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;and-we-get-this-result:d7338891ff065b1ca5fd0fae23813d48&#34;&gt;And we get this result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;UserHandler&amp;quot;,
    &amp;quot;packaged&amp;quot;: &amp;quot;com.pedro&amp;quot;,
    &amp;quot;parameters&amp;quot;: [],
    &amp;quot;annotations&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;RequestHandler&amp;quot;,
            &amp;quot;value&amp;quot;: &amp;quot;/user&amp;quot;,
            &amp;quot;targets&amp;quot;: &amp;quot;UserHandler&amp;quot;
        }
    ],
    &amp;quot;imports&amp;quot;: [],
    &amp;quot;methods&amp;quot;: [
        {
            &amp;quot;annotations&amp;quot;: [
                {
                    &amp;quot;name&amp;quot;: &amp;quot;Get&amp;quot;,
                    &amp;quot;value&amp;quot;: &amp;quot;/all&amp;quot;,
                    &amp;quot;targets&amp;quot;: &amp;quot;fetchAll&amp;quot;
                }
            ],
            &amp;quot;parameters&amp;quot;: [],
            &amp;quot;name&amp;quot;: &amp;quot;fetchAll&amp;quot;
        },
        {
            &amp;quot;annotations&amp;quot;: [
                {
                    &amp;quot;name&amp;quot;: &amp;quot;Get&amp;quot;,
                    &amp;quot;value&amp;quot;: &amp;quot;/id/:id&amp;quot;,
                    &amp;quot;targets&amp;quot;: &amp;quot;getByID&amp;quot;
                }
            ],
            &amp;quot;parameters&amp;quot;: [
                &amp;quot;$id&amp;quot;
            ],
            &amp;quot;name&amp;quot;: &amp;quot;getByID&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are wondering in what this can be used, just check this out &lt;a href=&#34;https://github.com/pedroassis/nd-express-plugin&#34;&gt;Express Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#Making_eval_and_arguments_simpler&#34;&gt;Mozilla&amp;rsquo;s MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-directive-prologues-and-the-use-strict-directive&#34;&gt;ECMAScript 5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://asmjs.org/spec/latest/&#34;&gt;ASM.js&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Classes in JavaScript</title>
          <link>http://localhost:1313/post/Classes/</link>
          <pubDate>Sat, 04 Jul 2015 12:14:38 BRT</pubDate>
          <author>Pedro Assis</author>
          <guid>http://localhost:1313/post/Classes/</guid>
          <description>

&lt;h4 id=&#34;i-see-a-lot-of-design-patterns-on-nodejs-most-of-then-i-don-t-like:20d1ea64521c4978f84dc5ec94fb9248&#34;&gt;I see a lot of design patterns on NodeJS, most of then I don&amp;rsquo;t like.&lt;/h4&gt;

&lt;p&gt;These NodeJS design patterns help us build fast applications using JavaScript, but they might lead to crappy code.&lt;/p&gt;

&lt;p&gt;Node-Dependency apps must follow some JS design patterns that I think are the easiest to learn for a programmer used to OOP.&lt;/p&gt;

&lt;p&gt;For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    // You can define Class-like functions with JS
    function MyClass(){}

    var myInstance = new MyClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty straight forward and anyone used to OOP will understand that.&lt;/p&gt;

&lt;p&gt;But is not a class as you&amp;rsquo;ll get with Java or C# or whatever.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    
    function Person(name){ 
        // The &#39;name&#39; is receive in the constructor and is a private variable
        // This is the constructor of your class
        // You can define private and public properties

        var lastName = &#39; is awesome!&#39;;  // Private variable
        this.lastName = name + lastName; // this.lastName is a public variable

        this.getFullName = function(){
            return name + &amp;quot; kind of&amp;quot; + lastName;
        };
    }

    var someone = new Person(&amp;quot;Mary&amp;quot;);

    console.log(someone.lastName); // &amp;quot;Mary is awesome!&amp;quot;
    console.log(someone.getFullName()); // &amp;quot;Mary kind of is awesome!&amp;quot;
    console.log(someone.name); // undefined
    console.log(someone.lastName); // &amp;quot; is awesome!&amp;quot;

    someone.name = &amp;quot;John&amp;quot;;

    console.log(someone.getFullName()); // &amp;quot;Mary kind of is awesome!&amp;quot;

    // You can see that &#39;name&#39; is a private variable,
    // and you cant access it outside the Class scope.

    // When changed &#39;name&#39; to &amp;quot;John&amp;quot;, you haven&#39;t changed anything. 
    // You accually created a new property in the same level as &#39;this.lastName&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty neat, right?&lt;/p&gt;

&lt;p&gt;Looking at Person class you might say that it has a dependency upon name.&lt;/p&gt;

&lt;p&gt;This is JS, so you are not required to provide the name upon object creation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    var someone = new Person();

    console.log(someone.getFullName()); // &amp;quot;undefined kind of is awesome!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hnm!&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
